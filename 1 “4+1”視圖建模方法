軟體架構常用模型就是視圖模型，類似RM-ODP的視點模型，可以從多個角度描述一個複雜的軟體系統。 
最受歡迎的視圖模型就是「4+1」視圖模型，它由五個視圖組成，包括場景視圖、邏輯視圖、流程視圖、實體視圖和開發視圖，如圖1-1所示。 
我們可以粗略地把「4+1」視圖模型看成是參考軟體生命週期五個階段建立的視圖模型，雖然實際上每個視圖描述的內容並不是局限於生命週期的一個階段，但顯而易見的是 ，除了結構要素之外，這種視圖模型也包含了流程要素。
「4+1」視圖模型實際上使得有不同需求的人員能夠得到他們對於軟體體系結構想要了解的東西。 
系統工程師先從實體視圖，然後從流程視圖靠近體系結構。 
最終使用者、客戶、資料專家從邏輯視圖看體系結構；專案經理、軟體配置人員從開發視圖看體系結構。
邏輯視圖也稱為概念視圖，主要是支援系統功能需求的抽象描述，即係統最終將提供給使用者什麼樣的服務。 
邏輯視圖關注的是系統必須為使用者提供的功能，不僅包括使用者可見的功能，還包括為實現使用者功能而必須提供的系統功能。 
在UML中，邏輯視圖包含了類別、介面和協作，它展現了系統的靜態或結構組成及特徵，描述場景視圖提出的系統功能的實現。 
邏輯視圖在UML中通常表現為類別圖、交互圖、順序圖和狀態圖。
 開發視圖也稱為模組視圖，主要著重於描述系統的組織，與邏輯視圖密切相關，都描述了系統的靜態結構。
開發視圖關注的是程式包，不僅包括要編寫的原始程序，還包括可以直接使用的第三份SDK和現成框架、類別庫，以及開發的系統將運行於其上的系統軟體或中間件等。
開發視圖關注軟體開發環境下實際模組的組織，反映了開發難度、軟體管理、重複使用性和通用性及由工具集、程式語言所帶來的限制和限制等。 
開發視圖和邏輯視圖之間可能存在一定的映射關係。 
開發視圖在UML中通常表現為包圖。
過程視圖主要著重於描述系統的動態行為，也就是係統運作時所表現出來的相關特性，著重解決系統的可靠性、吞吐量、並發性、分佈性和容錯性。 
過程視圖的關注點是運行中的執行緒、進程和物件等概念，以及相關的並發、同步、通訊等問題。 過程視圖和開發視圖相比，開發視圖一般偏重程式包在編譯時的靜態依賴關係，而這些程式運行起來之後就會表現為物件、執行緒、進程以及它們之間的呼叫關係，過程視圖比較關心的 正式這些運行時單元的互動問題。
過程視圖在UML中通常表現為活動圖、互動圖和狀態圖。
實體視圖描述如何把系統軟體元素映射到硬體上，通常要考慮系統的效能、規模和容錯等問題，展示了所需的實體環境、硬體配置和分佈狀況。 
實體視圖關注的是目標程式及其依賴的運行庫和系統軟體最終如何安裝和部署到實體機器上，以及如何部署機器和網路來配置軟體系統的可靠性、可擴展性等要求。 
實體視圖和過程視圖相比，過程視圖特別關注目標程式的動態執行情況，而物理視圖重視目標程式的靜態位置問題；物理視圖是綜合考慮軟體系統和整個IT系統相互影響的架構視圖。 
實體視圖在UML中通常表現為部署圖。
